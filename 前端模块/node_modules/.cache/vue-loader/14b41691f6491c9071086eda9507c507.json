{"remainingRequest":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\大水管子\\Beginner_Guide\\前端模块\\src\\views\\Home.vue?vue&type=style&index=0&id=fae5bece&scoped=true&lang=css","dependencies":[{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\src\\views\\Home.vue","mtime":1748097007413},{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\css-loader\\dist\\cjs.js","mtime":1748024887609},{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1748024879016},{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\postcss-loader\\src\\index.js","mtime":1748024887367},{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1748024889641},{"path":"D:\\大水管子\\Beginner_Guide\\前端模块\\node_modules\\vue-loader\\lib\\index.js","mtime":1748024878761}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ob21lLWNvbnRhaW5lciB7CiAgaGVpZ2h0OiAxMDB2aDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi5lbC1oZWFkZXIgewogIGJhY2tncm91bmQtY29sb3I6ICMyYzNlNTA7CiAgY29sb3I6IHdoaXRlOwogIGxpbmUtaGVpZ2h0OiA2MHB4OwogIGJveC1zaGFkb3c6IDAgMnB4IDEycHggMCByZ2JhKDAsIDAsIDAsIDAuMSk7Cn0KCi5oZWFkZXItY29udGVudCB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBwYWRkaW5nOiAwIDE1cHg7Cn0KCi5sb2dvLXNlY3Rpb24gewogIGZsZXg6IDE7Cn0KCi5sb2dvLXNlY3Rpb24gaDIgewogIG1hcmdpbjogMDsKICBmb250LXNpemU6IDIwcHg7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBjb2xvcjogI2ZmZjsKfQoKLm5hdi1saW5rcyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGZsZXg6IDI7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7Cn0KCi5uYXYtbGlua3MgLmVsLWJ1dHRvbiB7CiAgY29sb3I6ICNlMGUwZTA7CiAgZm9udC1zaXplOiAxNXB4OwogIG1hcmdpbjogMCAxNXB4OwogIHBhZGRpbmc6IDEwcHggMTVweDsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgdHJhbnNpdGlvbjogYWxsIDAuM3M7Cn0KCi5uYXYtbGlua3MgLmVsLWJ1dHRvbjpob3ZlciB7CiAgY29sb3I6IHdoaXRlOwogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTsKfQoKLnVzZXItaW5mbyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7CiAgZmxleDogMTsKfQoKLnVzZXJuYW1lLWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTsKICBwYWRkaW5nOiA1cHggMTJweDsKICBib3JkZXItcmFkaXVzOiAyMHB4OwogIG1hcmdpbi1yaWdodDogMTVweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgdHJhbnNpdGlvbjogYWxsIDAuM3M7Cn0KCi51c2VybmFtZS1jb250YWluZXI6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTsKfQoKLnVzZXJuYW1lLXRleHQgewogIG1hcmdpbi1sZWZ0OiA4cHg7CiAgZm9udC13ZWlnaHQ6IDUwMDsKfQoKLmF2YXRhci1jb250YWluZXIgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKLm1pbmktYXZhdGFyIHsKICB3aWR0aDogMzBweDsKICBoZWlnaHQ6IDMwcHg7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIG9iamVjdC1maXQ6IGNvdmVyOwogIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsKfQoKLmF2YXRhci1wbGFjZWhvbGRlciB7CiAgd2lkdGg6IDMwcHg7CiAgaGVpZ2h0OiAzMHB4OwogIGJvcmRlci1yYWRpdXM6IDUwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTc0YzNjOwogIGNvbG9yOiB3aGl0ZTsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgZm9udC1zaXplOiAxNHB4OwogIGZvbnQtd2VpZ2h0OiBib2xkOwogIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTsKfQoKLmxvZ291dC1idG4gewogIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KCi5lbC1tYWluIHsKICBwYWRkaW5nOiAyMHB4OwogIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmE7Cn0KCi50YXNrLWhlYWRlciB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9CgoudGFzay1maWx0ZXIgewogIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LXdyYXA6IHdyYXA7CiAgZ2FwOiAxNXB4Owp9CgouZmlsdGVyLXJvdyB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9CgouZmlsdGVyLWxhYmVsIHsKICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5vdmVyZHVlIHsKICBjb2xvcjogI0Y1NkM2QzsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLnRhc2stY29tcGxldGVkIHsKICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsKICBjb2xvcjogIzkwOTM5OTsKfQo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";AA8bfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home-container\">\n    <el-container>\n      <!-- 头部 -->\n      <el-header>\n        <div class=\"header-content\">\n          <div class=\"logo-section\">\n            <h2>任务管理系统</h2>\n          </div>\n          <div class=\"nav-links\">\n            <el-button type=\"text\" @click=\"$router.push('/home')\">\n              <i class=\"el-icon-s-home\"></i> 首页\n            </el-button>\n            <el-button type=\"text\" @click=\"$router.push('/files')\">\n              <i class=\"el-icon-folder\"></i> 文件管理\n            </el-button>\n          </div>\n          <div class=\"user-info\">\n            <div class=\"username-container\" @click=\"$router.push('/profile')\">\n              <div v-if=\"user && user.avatarUrl\" class=\"avatar-container\">\n                <img :src=\"user.avatarUrl\" class=\"mini-avatar\" alt=\"头像\">\n              </div>\n              <div v-else class=\"avatar-placeholder\">{{ userInitials }}</div>\n              <span class=\"username-text\">{{ user ? user.username : '用户' }}</span>\n            </div>\n            <el-button type=\"danger\" size=\"small\" @click=\"logout\" class=\"logout-btn\">\n              <i class=\"el-icon-switch-button\"></i> 退出\n            </el-button>\n          </div>\n        </div>\n      </el-header>\n      \n      <!-- 主体内容 -->\n      <el-main>\n        <div class=\"task-header\">\n          <h3>我的任务列表</h3>\n          <el-button type=\"primary\" size=\"small\" @click=\"showAddTaskDialog\">新建任务</el-button>\n        </div>\n        \n        <!-- 任务过滤器 -->\n        <div class=\"task-filter\">\n          <div class=\"filter-row\">\n            <span class=\"filter-label\">状态：</span>\n            <el-radio-group v-model=\"taskFilter\" size=\"small\">\n              <el-radio-button label=\"all\">全部</el-radio-button>\n              <el-radio-button label=\"active\">未完成</el-radio-button>\n              <el-radio-button label=\"completed\">已完成</el-radio-button>\n            </el-radio-group>\n          </div>\n          \n          <div class=\"filter-row\">\n            <span class=\"filter-label\">优先级：</span>\n            <el-radio-group v-model=\"priorityFilter\" size=\"small\">\n              <el-radio-button label=\"all\">全部</el-radio-button>\n              <el-radio-button label=\"low\">低</el-radio-button>\n              <el-radio-button label=\"medium\">中</el-radio-button>\n              <el-radio-button label=\"high\">高</el-radio-button>\n            </el-radio-group>\n          </div>\n        </div>\n        \n        <!-- 任务列表 -->\n        <el-table\n          v-loading=\"loading\"\n          :data=\"filteredTasks\"\n          style=\"width: 100%\"\n          empty-text=\"暂无任务\"\n        >\n          <el-table-column prop=\"title\" label=\"任务名称\" min-width=\"180\">\n            <template slot-scope=\"scope\">\n              <el-checkbox\n                v-model=\"scope.row.completed\"\n                @change=\"updateTaskStatus(scope.row)\"\n              ></el-checkbox>\n              <span :class=\"{ 'task-completed': scope.row.completed }\">{{ scope.row.title }}</span>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"description\" label=\"任务描述\" min-width=\"200\"></el-table-column>\n          \n          <el-table-column prop=\"priority\" label=\"优先级\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <el-tag \n                :type=\"getPriorityType(scope.row.priority)\" \n                size=\"small\"\n              >\n                {{ getPriorityLabel(scope.row.priority) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"dueDate\" label=\"截止日期\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <span :class=\"{ 'overdue': isOverdue(scope.row.dueDate) && !scope.row.completed }\">\n                {{ formatDate(scope.row.dueDate, 'date') || '无' }}\n              </span>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"createdAt\" label=\"创建时间\" width=\"120\">\n            <template slot-scope=\"scope\">\n              {{ formatDate(scope.row.createdAt) }}\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"操作\" width=\"150\" align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-button\n                size=\"mini\"\n                type=\"primary\"\n                icon=\"el-icon-edit\"\n                @click=\"editTask(scope.row)\"\n                circle\n              ></el-button>\n              <el-button\n                size=\"mini\"\n                type=\"danger\"\n                icon=\"el-icon-delete\"\n                @click=\"confirmDeleteTask(scope.row)\"\n                circle\n              ></el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-main>\n    </el-container>\n    \n    <!-- 添加/编辑任务对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"taskForm\" :rules=\"taskRules\" ref=\"taskForm\" label-width=\"80px\">\n        <el-form-item label=\"任务名称\" prop=\"title\">\n          <el-input v-model=\"taskForm.title\" placeholder=\"请输入任务名称\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"任务描述\" prop=\"description\">\n          <el-input\n            type=\"textarea\"\n            v-model=\"taskForm.description\"\n            placeholder=\"请输入任务描述\"\n            :rows=\"4\"\n          ></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"优先级\" prop=\"priority\">\n          <el-select v-model=\"taskForm.priority\" placeholder=\"请选择优先级\">\n            <el-option label=\"低\" value=\"low\"></el-option>\n            <el-option label=\"中\" value=\"medium\"></el-option>\n            <el-option label=\"高\" value=\"high\"></el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"截止日期\" prop=\"dueDate\">\n          <el-date-picker\n            v-model=\"taskForm.dueDate\"\n            type=\"datetime\"\n            placeholder=\"选择截止日期时间\"\n            format=\"yyyy-MM-dd HH:mm\"\n            value-format=\"yyyy-MM-dd HH:mm:ss\"\n            :picker-options=\"{firstDayOfWeek: 1}\"\n          ></el-date-picker>\n        </el-form-item>\n        \n        <el-form-item label=\"状态\" prop=\"completed\">\n          <el-switch v-model=\"taskForm.completed\" active-text=\"已完成\" inactive-text=\"未完成\"></el-switch>\n        </el-form-item>\n      </el-form>\n      \n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitTaskForm\" :loading=\"submitting\">确定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      // 加载状态\n      loading: false,\n      // 提交状态\n      submitting: false,\n      // 任务过滤器\n      taskFilter: 'all',\n      // 优先级过滤器\n      priorityFilter: 'all',\n      // 对话框可见性\n      dialogVisible: false,\n      // 对话框标题\n      dialogTitle: '新建任务',\n      // 是否为编辑模式\n      isEdit: false,\n      // 任务表单\n      taskForm: {\n        id: null,\n        title: '',\n        description: '',\n        priority: 'medium',\n        dueDate: null,\n        completed: false\n      },\n      // 表单验证规则\n      taskRules: {\n        title: [\n          { required: true, message: '请输入任务名称', trigger: 'blur' },\n          { min: 1, max: 50, message: '任务名称长度应为1-50个字符', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters({\n      user: 'getUser',\n      tasks: 'getTasks'\n    }),\n    \n    // 获取用户名首字母（无头像时显示）\n    userInitials() {\n      if (!this.user || !this.user.username) return '?'\n      return this.user.username.charAt(0).toUpperCase()\n    },\n    // 根据过滤条件筛选任务\n    filteredTasks() {\n      let filtered = this.tasks;\n      \n      // 按完成状态筛选\n      if (this.taskFilter === 'active') {\n        filtered = filtered.filter(task => !task.completed);\n      } else if (this.taskFilter === 'completed') {\n        filtered = filtered.filter(task => task.completed);\n      }\n      \n      // 按优先级筛选\n      if (this.priorityFilter !== 'all') {\n        filtered = filtered.filter(task => task.priority === this.priorityFilter);\n      }\n      \n      return filtered;\n    }\n  },\n  created() {\n    // 获取用户信息和任务列表\n    this.fetchData()\n  },\n  methods: {\n    // 获取数据\n    async fetchData() {\n      this.loading = true\n      try {\n        // 如果没有用户信息，获取用户信息\n        if (!this.user) {\n          await this.$store.dispatch('fetchUserInfo')\n        }\n        // 获取任务列表\n        await this.$store.dispatch('fetchTasks')\n      } catch (error) {\n        this.$message.error('获取数据失败')\n        console.error(error)\n      } finally {\n        this.loading = false\n      }\n    },\n    \n    // 格式化日期\n    formatDate(dateString, type = 'datetime') {\n      if (!dateString) return ''\n      const date = new Date(dateString)\n      \n      if (type === 'date') {\n        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`\n      }\n      \n      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`\n    },\n    \n    // 获取优先级标签\n    getPriorityLabel(priority) {\n      const labels = {\n        low: '低',\n        medium: '中',\n        high: '高'\n      }\n      return labels[priority] || '中'\n    },\n    \n    // 获取优先级标签类型\n    getPriorityType(priority) {\n      const types = {\n        low: 'info',\n        medium: 'warning',\n        high: 'danger'\n      }\n      return types[priority] || 'warning'\n    },\n    \n    // 判断是否过期\n    isOverdue(dueDate) {\n      if (!dueDate) return false\n      return new Date(dueDate) < new Date()\n    },\n    \n    // 显示添加任务对话框\n    showAddTaskDialog() {\n      this.isEdit = false\n      this.dialogTitle = '新建任务'\n      this.resetTaskForm()\n      this.dialogVisible = true\n    },\n    \n    // 编辑任务\n    editTask(task) {\n      this.isEdit = true\n      this.dialogTitle = '编辑任务'\n      this.taskForm = {\n        id: task.id,\n        title: task.title,\n        description: task.description,\n        priority: task.priority,\n        dueDate: task.dueDate,\n        completed: task.completed\n      }\n      this.dialogVisible = true\n    },\n    \n    // 重置任务表单\n    resetTaskForm() {\n      if (this.$refs.taskForm) {\n        this.$refs.taskForm.resetFields()\n      }\n      this.taskForm = {\n        id: null,\n        title: '',\n        description: '',\n        priority: 'medium',\n        dueDate: null,\n        completed: false\n      }\n    },\n    \n    // 提交任务表单\n    submitTaskForm() {\n      this.$refs.taskForm.validate(async valid => {\n        if (!valid) return\n        \n        this.submitting = true\n        \n        try {\n          if (this.isEdit) {\n            // 更新任务\n            await this.$store.dispatch('updateTask', {\n              id: this.taskForm.id,\n              taskData: {\n                title: this.taskForm.title,\n                description: this.taskForm.description,\n                priority: this.taskForm.priority,\n                dueDate: this.taskForm.dueDate,\n                completed: this.taskForm.completed\n              }\n            })\n            this.$message.success('任务更新成功')\n          } else {\n            // 创建任务\n            await this.$store.dispatch('createTask', {\n              title: this.taskForm.title,\n              description: this.taskForm.description,\n              priority: this.taskForm.priority,\n              dueDate: this.taskForm.dueDate,\n              completed: this.taskForm.completed\n            })\n            this.$message.success('任务创建成功')\n          }\n          \n          // 关闭对话框\n          this.dialogVisible = false\n        } catch (error) {\n          this.$message.error(this.isEdit ? '更新任务失败' : '创建任务失败')\n          console.error(error)\n        } finally {\n          this.submitting = false\n        }\n      })\n    },\n    \n    // 更新任务状态\n    async updateTaskStatus(task) {\n      try {\n        await this.$store.dispatch('updateTask', {\n          id: task.id,\n          taskData: {\n            title: task.title,\n            description: task.description,\n            priority: task.priority,\n            dueDate: task.dueDate,\n            completed: task.completed\n          }\n        })\n      } catch (error) {\n        this.$message.error('更新任务状态失败')\n        console.error(error)\n        // 恢复原状态\n        task.completed = !task.completed\n      }\n    },\n    \n    // 确认删除任务\n    confirmDeleteTask(task) {\n      this.$confirm('确定要删除这个任务吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await this.$store.dispatch('deleteTask', task.id)\n          this.$message.success('任务删除成功')\n        } catch (error) {\n          this.$message.error('删除任务失败')\n          console.error(error)\n        }\n      }).catch(() => {\n        // 取消删除，不做任何操作\n      })\n    },\n    \n    // 登出\n    logout() {\n      this.$confirm('确定要退出登录吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.$store.dispatch('logout')\n        this.$router.push('/login')\n        this.$message.success('已退出登录')\n      }).catch(() => {\n        // 取消登出，不做任何操作\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home-container {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.el-header {\n  background-color: #2c3e50;\n  color: white;\n  line-height: 60px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.header-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 15px;\n}\n\n.logo-section {\n  flex: 1;\n}\n\n.logo-section h2 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 600;\n  color: #fff;\n}\n\n.nav-links {\n  display: flex;\n  align-items: center;\n  flex: 2;\n  justify-content: center;\n}\n\n.nav-links .el-button {\n  color: #e0e0e0;\n  font-size: 15px;\n  margin: 0 15px;\n  padding: 10px 15px;\n  border-radius: 4px;\n  transition: all 0.3s;\n}\n\n.nav-links .el-button:hover {\n  color: white;\n  background-color: rgba(255, 255, 255, 0.1);\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  flex: 1;\n}\n\n.username-container {\n  display: flex;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.1);\n  padding: 5px 12px;\n  border-radius: 20px;\n  margin-right: 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.username-container:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n}\n\n.username-text {\n  margin-left: 8px;\n  font-weight: 500;\n}\n\n.avatar-container {\n  position: relative;\n}\n\n.mini-avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 2px solid rgba(255, 255, 255, 0.8);\n}\n\n.avatar-placeholder {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: #e74c3c;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  font-weight: bold;\n  border: 2px solid rgba(255, 255, 255, 0.8);\n}\n\n.logout-btn {\n  font-weight: 500;\n}\n\n.el-main {\n  padding: 20px;\n  background-color: #f5f7fa;\n}\n\n.task-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.task-filter {\n  margin-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n}\n\n.filter-row {\n  display: flex;\n  align-items: center;\n}\n\n.filter-label {\n  margin-right: 10px;\n  font-weight: bold;\n}\n\n.overdue {\n  color: #F56C6C;\n  font-weight: bold;\n}\n\n.task-completed {\n  text-decoration: line-through;\n  color: #909399;\n}\n</style>\n"]}]}